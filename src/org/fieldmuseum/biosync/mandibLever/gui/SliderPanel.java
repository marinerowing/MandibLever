/*
 * Copyright (C) 2010 Mark Westneat, Kristopher Urie
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.fieldmuseum.biosync.mandibLever.gui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Hashtable;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.fieldmuseum.biosync.biomechanics.muscle.Muscle;
import org.fieldmuseum.biosync.mandibLever.model.MandibLeverMuscle;
import org.fieldmuseum.biosync.mandibLever.model.Mandible;
import org.fieldmuseum.biosync.mandibLever.model.Specimen;

/**
 *
 * @author kurie
 */
public class SliderPanel extends javax.swing.JPanel {

    /** Creates new form SliderPanel */
    public SliderPanel() {
        initComponents();
    }

    public void setSpecimen(Specimen specimen) {
        // update slider models
        a2Slider.setModel(new MuscleRangeModel(specimen.getA2(), specimen));
        a3Slider.setModel(new MuscleRangeModel(specimen.getA3(), specimen));
        jawSlider.setModel(new JawRangeModel(specimen));

        setLabels();

        /* TODO destroy the old models, they're still listening to the previous 
         * spec, so they won't be garbage collected.  For a large number of
         * specimens, this will waste resources. (But it would require an
         * unreasonable number of specimens...)
         */
    }

    private void setLabels() {
        Hashtable a2Labels = a2Slider.createStandardLabels(1);
        for (Object key : a2Labels.keySet()) {
            int value = (Integer) key;
            JLabel label = new JLabel(value + "%");
            a2Labels.put(key, label);
        }
        a2Labels.put(a2Slider.getMinimum(), new JLabel("Open"));
        a2Labels.put(a2Slider.getMaximum(), new JLabel("Close"));
        a2Slider.setLabelTable(a2Labels);

        Hashtable a3Labels = a3Slider.createStandardLabels(1);
        for (Object key : a3Labels.keySet()) {
            int value = (Integer) key;
            JLabel label = new JLabel(value + "%");
            a3Labels.put(key, label);
        }
        a3Labels.put(a3Slider.getMinimum(), new JLabel("Open"));
        a3Labels.put(a3Slider.getMaximum(), new JLabel("Close"));
        a3Slider.setLabelTable(a3Labels);

        Hashtable rotLabels = jawSlider.createStandardLabels(5);
        for (Object key : rotLabels.keySet()) {
            int value = (Integer) key;
            JLabel label = new JLabel(value + "\u00B0");
            rotLabels.put(key, label);
        }
        rotLabels.put(jawSlider.getMinimum(), new JLabel("Close"));
        rotLabels.put(jawSlider.getMaximum(), new JLabel("Open"));
        jawSlider.setLabelTable(rotLabels);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jawSlider = new javax.swing.JSlider();
        a2Slider = new javax.swing.JSlider();
        a3Slider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jawSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        jawSlider.setPaintLabels(true);
        jawSlider.setInverted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(jawSlider, gridBagConstraints);

        a2Slider.setOrientation(javax.swing.JSlider.VERTICAL);
        a2Slider.setPaintLabels(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(a2Slider, gridBagConstraints);

        a3Slider.setOrientation(javax.swing.JSlider.VERTICAL);
        a3Slider.setPaintLabels(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(a3Slider, gridBagConstraints);

        jLabel1.setText("Jaw Rotation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("A2 Contraction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("A3 Contraction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jLabel3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider a2Slider;
    private javax.swing.JSlider a3Slider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSlider jawSlider;
    // End of variables declaration//GEN-END:variables


    private abstract class SpecimenRangeModel extends DefaultBoundedRangeModel {
        protected final Specimen specimen;

        public SpecimenRangeModel(Specimen specimen) {
            this.specimen = specimen;

            Mandible.addStaticPropertyChangeListener(new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    if (evt.getPropertyName().equals("maxRotation")) {
                        updateMaxJawAngle(-Math.toDegrees((Double) evt.getNewValue()));
                        setLabels();
                    }
                }
            });
        }

        /**
         * updates the model bounds for the given max jaw angle.
         * @param maxJawAngle the maximum allowed jaw rotation, in degrees.  In
         * this case, positive rotation opens the jaw, negative closes it.
         * (The GUI should always deal in degrees and +open/-close.  Unlike the
         * model, which sticks with the Java convention of using radians and
         * the mathematical convention of positive rotations being counter-
         * clockwise.)
         */
        protected abstract void updateMaxJawAngle(double maxJawAngle);
    }

    private class MuscleRangeModel extends SpecimenRangeModel {
        final Muscle muscle;

        public MuscleRangeModel(MandibLeverMuscle m, Specimen spec) {
            super(spec);
            this.muscle = m;
            updateMaxJawAngle(Math.toDegrees(-Mandible.getMaxRotation()));
            setValue((int) Math.round(100 * specimen.getContraction(muscle)));

            m.addPropertyChangeListener(new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    if (evt.getPropertyName().equals("length")) {
                        setValue((int) Math.round(100 * specimen.getContraction(muscle)));
                    }
                }
            });
        }

        @Override
        protected void updateMaxJawAngle(double maxJawAngle) {
            setMinimum(0);
            setMaximum((int) Math.floor(100 * specimen.getMaxContraction(muscle)));
        }

        @Override
        public void setValue(int n) {
            if (getValueIsAdjusting()) {
                specimen.setContraction(muscle, n/100.0);
            }
            super.setValue(n);
        }
    }

    private class JawRangeModel extends SpecimenRangeModel {

        public JawRangeModel(Specimen specimen) {
            super(specimen);
            updateMaxJawAngle(Math.toDegrees(-Mandible.getMaxRotation()));
            setValue((int) -Math.round(Math.toDegrees(specimen.getMandible().getRotation())));

            this.specimen.getMandible().addPropertyChangeListener(new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    if (evt.getPropertyName().equals("rotation")) {
                        if (!getValueIsAdjusting()) {
                            //if the change wasn't caused by this slider, set new slider value
                            double newRotation = (Double) evt.getNewValue();
                            int sliderValue = (int) -Math.round(Math.toDegrees(newRotation));
                            setValue(sliderValue);
                        }
                    }
                }
            });
        }

        @Override
        public void setValue(int n) {
            if (getValueIsAdjusting()) {
                double rotation = -Math.toRadians(n);
                specimen.getMandible().setRotation(rotation);
            }
            super.setValue(n);
        }

        @Override
        protected void updateMaxJawAngle(double maxJawAngle) {
            setMaximum((int) Math.round(maxJawAngle));
        }
    }
}
